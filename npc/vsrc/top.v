// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

module IFU(	// <stdin>:2:10
  input  clock,
         reset,
  output io_led);

  reg        x;	// IFU.scala:35:18
  reg [31:0] cnt;	// IFU.scala:37:20
  always @(posedge clock) begin
    if (reset) begin
      x <= 1'h0;	// IFU.scala:35:18
      cnt <= 32'h0;	// IFU.scala:37:20
    end
    else begin
      automatic logic _T;	// IFU.scala:39:12
      _T = cnt < 32'h17D7840;	// IFU.scala:37:20, :39:12
      x <= _T ^ ~x;	// IFU.scala:35:18, :39:{12,23}, :43:7
      if (_T)	// IFU.scala:39:12
        cnt <= cnt + 32'h1;	// IFU.scala:37:20, :40:16
      else	// IFU.scala:39:12
        cnt <= 32'h0;	// IFU.scala:37:20
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        x = _RANDOM_0[0];	// IFU.scala:35:18
        cnt = {_RANDOM_0[31:1], _RANDOM_1[0]};	// IFU.scala:35:18, :37:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_led = x;	// <stdin>:2:10, IFU.scala:35:18
endmodule

module top(	// <stdin>:22:10
  input  clock,
         reset,
  output io_led);

  IFU ifu (	// top.scala:10:19
    .clock  (clock),
    .reset  (reset),
    .io_led (io_led)
  );
endmodule

